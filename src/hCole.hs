{-

Entrypoint to the Haskell COLE implementation.

This module simply uses functionality provided by other modules, e.g., 
  - for generating random entities
  - for evaluating a given set of entities
  - for building a model based om measured data
  - for exploring using a model or actual evaluation
  - ...

If you have additional backends, compiler suites, benchmarks, ... that you wish to use, 
you should add them to the option lists and provide the implementation.

-}

module Main 
  (
  )where

import System.Console.CmdArgs

--import GA

import qualified Cole.Benchmark as Benchmark
import qualified Cole.Compiler as Compiler
import qualified Cole.Entity as Entity




--------------------------------------------------------------------------------
-- data structure for the command line arguments
--
-- FIXME: this should be split into multiple sections, since we probably want to 
--        split the exploration into different actions. Moreover, we might want
--        to start any of the actions with a predefined set of data that need not
--        have been generated by hCole.
--        
data ColeCmdArgs = ColeCmdArgs 
    { compiler :: Compiler.ColeCompilerType
    , suite :: Benchmark.ColeSuiteType -- FIXME: should be possible to provide multiple suites
    , benchmarks :: String  
    , random :: Bool
    , entitiesFile :: FilePath
    , model :: Model.ColeModelType
    } deriving (Show, Data, Typeable)

hColeArgs = ColeCmdArgs 
    { compiler     = ColeLLVM &= explicit &= name "compiler" &= help "The compiler to tune."
    , suite        = ColeSPECCPU2000 &= explicit &= name "suite" &= help "The benchmark suite to use for tuning."
    , benchmarks   = "" &= explicit &= name "benchmarks" &= help "The benchmarks from the suite to use."
    , random       = False &= explicit &= name "random" &= help "Randomly generate a set of random entities to bootstrap the search."
    , entitiesFile = "" &= explicit &= name "entities" &= help "File listing the entities for the target of choice."
    , model        = ColeM5 &= explicit &= name "model" &= help "Model type to use for exploring."
    }
    &= help "Compiler Optimisation Level Exploration (COLE)."
    &= summary "hCole v 0.1, (C) 2011 Andy Georges."


main = do 
    putStrLn "I am your COLE."

    args <- cmdArgs ColeCmdArgs


    putStrLn "I am done."
  
